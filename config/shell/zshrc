### General ###

zmodload zsh/zprof

export EDITOR=nvim
export BAT_THEME="gruvbox-dark"
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export MANPAGER='nvim +Man!'
export MANWIDTH=999

### ZSH Settings ###

[[ "$(uname)" = "Linux" ]] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
export PATH=~/.local/scripts/bin:$PATH # Custom scripts
export PATH=~/.local/bin:$PATH         # Installed scripts
export PATH=~/bin:/usr/local/bin:$PATH
export ZSH=~/.oh-my-zsh

HOMEBREW_NO_AUTO_UPDATE="true"
ZSH_DISABLE_COMPFIX="true" # Skip verification of insecure directories (macOS error)
ENABLE_CORRECTION="false"
ZSH_CUSTOM=~/.zsh/custom

# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/
plugins=(
    copypath
    docker
    docker-compose
    fzf
    git-prompt
    git-auto-fetch
    safe-paste
    wakatime
    zsh-autosuggestions
    zsh-completions
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

### Prompt ###

unset RPROMPT
ZSH_THEME_GIT_PROMPT_PREFIX="("
ZSH_THEME_GIT_PROMPT_SUFFIX=")"
ZSH_THEME_GIT_PROMPT_SEPARATOR="|"
ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg[white]%}"
ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[white]%}%{●%G%}"
ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[white]%}%{x%G%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[white]%}%{+%G%}"
ZSH_THEME_GIT_PROMPT_DELETED="%{$fg[white]%}%{-%G%}"
ZSH_THEME_GIT_PROMPT_BEHIND=" %{$fg[white]%}%{↓%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD=" %{$fg[white]%}%{↑%G%}"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[white]%}%{…%G%}"
ZSH_THEME_GIT_PROMPT_STASHED="%{$fg[white]%}%{⚑%G%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[white]%}%{✔%G%}"
ZSH_THEME_GIT_PROMPT_UPSTREAM_SEPARATOR="->"

# %B (%b): Start (stop) boldface
# %F (%f): Start (stop) using a different foreground colour, if supported by the terminal
# %n: Username
# %m: Hostname
# %(5~|%-1~/…/%3~|%4~): Prompt dir. trimming
NEWLINE=$'\n'
[[ -n "$SSH_CLIENT" ]] && ssh_flag="(ssh) "
setopt PROMPT_SUBST
PS1='%B%F{100}[%*] ${ssh_flag}%n@%m:%f%F{66}%(5~|%-1~/…/%3~|%4~)%f%b $(git_super_status "(%s)")${NEWLINE}\$ '

### Dev ###

case "$(uname)" in
Darwin)
    ;;
Linux)
    # Java
    export JAVA_17_AMAZON_CORRETTO_HOME="/usr/lib/jvm/java-17-amazon-corretto.x86_64"
    export JAVA_HOME=$JAVA_17_AMAZON_CORRETTO_HOME
    export PATH="$JAVA_HOME/bin":$PATH

    # Go
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOPATH/bin
    export BGO_WORKSPACE_PKGS_ENABLED=1
    ;;
esac

# Node
export NODE_PATH="$(dirname $(mise exec nodejs@18 -- which node))"
export PATH=$NODE_PATH:$PATH
export NODE_OPTIONS="--no-deprecation"

# Python
export PATH="$HOME/Library/Python/3.11/bin:$PATH"

### Aliases ###

# system
alias ..="cd .."
alias cd..="cd .."
alias cdd="cd ~/.dotfiles"
alias chx="chmod +x"
alias cls="clear"
alias cl="cls && l"
alias env="env | sort | less"
alias path="tr ':' '\n' <<<"$PATH" | less"
alias q="exit"
case "$(uname)" in
Darwin)
    alias doc="cd ~/Documents"
    alias dp="cd ~/Desktop"
    alias dow="cd ~/Downloads"
    ;;
Linux)
    alias open="xdg-open"
    ;;
esac

# aws
case "$(uname)" in
Darwin)
    alias wp="cd /Volumes/workplace/"
    ;;
Linux)
    alias wp="cd /workplace/brajit/"
    ;;
esac
alias bb="brazil-build"
alias gobb="BGO_WORKSPACE_PKGS_ENABLED=1 brazil-build release"
alias bbb="/apollo/env/envImprovement/bin/brazil-recursive-cmd-parallel --allPackages brazil-build"
alias bws="brazil ws"
alias bwsm="brazil ws sync -md"
alias bwsa="brazil ws sync -md && brazil ws sync -src"
alias mcurl='/usr/bin/curl "$@" -L --cookie ~/.midway/cookie --cookie-jar ~/.midway/cookie'

# files
alias less="less -R"
alias mv="mv -i"
alias sizer="du -h * | sort -hr | less"

# eza (a modern replacement for ls)
alias l='eza -la --icons -h --git --no-user'
alias ls='eza'
alias lt='eza -T -L'
alias sl="ls"

# dev
alias n="nvim"
alias pip="pip3"
alias python="python3"

# git
alias ga="git add"
alias gaa="git add --all"
alias gac="git add . && git commit -m"
alias gap="git add --all -p"
alias gb="git branch"
alias gc="git commit"
alias gcm="git commit -m"
alias gca="git commit --amend"
alias gcd="git checkout"
alias gd="git diff"
alias gds="git diff --staged"
alias gl="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias gpl="git fetch --all && git pull --rebase"
# alias gpla="git-pull-all . -r"
alias gpla="find . -name .git -type d -execdir pwd \; -execdir git fetch --all \; -execdir git pull --rebase \;"
alias gr="git restore"
alias grs="git restore --staged"
alias gs="git status"
alias gsa="find . -name .git -type d -execdir pwd \; -execdir git status \; -execdir echo \; -execdir echo \;"
alias gst='git stash -- $(git diff --staged --name-only)'
alias gsp="git stash pop"
alias gsu="git submodule update --init --recursive"
alias gsur="git submodule update --remote"
alias gu="git reset --soft HEAD~1"

# tmux
alias tl="tmux ls"
alias tn="tmux new -s"
alias tks="tmux kill-session -t"
alias tka="tmux kill-session -a"
alias ta="tmux attach-session -t"
alias td="tmux detach-client -s"
alias ts="tmux switch -t"

# vs code
alias codex="code --list-extensions"
alias codein="cat ~/.dotfiles/config/vscode/extensions.txt | xargs -L 1 echo code --install-extension | bash"
alias codeinssh="cat ~/.dotfiles/config/vscode/extensions-devdesk.txt | xargs -L 1 echo code --install-extension | bash"

# docker
alias dc="docker-compose"
alias dcb="docker-compose build"
alias dcu="docker-compose up"
alias dcd="docker-compose down"

### Functions ###

# pretty print a csv file
csv() {
    column -t -s, "$1" | less -S
}

# force set hostname (to prevent network from setting it)
sethost() {
    sudo scutil --set HostName "$1"
}

# convert markdown to pdf
mkpdf() {
    filename="$1"
    base="${filename%.*}"
    pandoc -o $base.pdf --pdf-engine=/Library/TeX/texbin/pdflatex $base.md
    echo "File created: $base.pdf"
}

# TCP ports in use
ports() {
    netstat -Watnlv | grep LISTEN | awk '{"ps -o comm= -p " $9 | getline procname;colred="\033[01;31m";colclr="\033[0m"; print colred "proto: " colclr $1 colred " | addr.port: " colclr $4 colred " | pid: " colclr $9 colred " | name: " colclr procname;  }' | column -t -s "|"
}

# git rebase
grb() {
    git rebase -i "HEAD~$1"
}

### AWS ###

# Toolbox
export PATH=~/.toolbox/bin:$PATH

# AWS CLI completion
complete -C "$(brew --prefix)/bin/aws_completer" aws

# Access to amazon/federate CodeArtifact in ep+dev us-west-2
codeartifact() {
    echo -e "Logging in to Federate CodeArtifact..."
    aws codeartifact login \
        --tool npm \
        --domain amazon \
        --repository federate \
        --domain-owner 149122183214 \
        --profile fed-ep-dev-admin \
        --region us-west-2
}

# Isengard AWS profiles
export NODE_ISENGARD_PATH=~/workplace/NodeIsengard/src/NodeIsengard
export AWS_CONFIG_FILE=$NODE_ISENGARD_PATH/profiles/isengardcli
node-isengard-update() {
    cd $NODE_ISENGARD_PATH
    git pull
    cd -
    codeartifact
    npm i -g @amzn/node-isengard
    node-isengard -v
    node-isengard -h
}

# Conduit AWS profiles
## Get all Conduit accounts the user has access to
function conduit-accounts {
   mcurl -s https://conduit.security.a2z.com/api/accounts\?partition\=aws\&maxResults\=500\&fetchFromDynamo\=true | jq '.conduitAccountList[]'
}

## Assume role in a Conduit AWS account
function conduit {
   ACCOUNT_ID=$(conduit-accounts | jq 'select(.name == "'$1'") | .identifier.accountId' -r)
   ROLE=${2:-IibsAdminAccess-DO-NOT-DELETE}

   echo "[$1] Assuming role $ROLE in account $ACCOUNT_ID"

   unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
   ada credentials update --account=$ACCOUNT_ID --role $ROLE --provider conduit --once
   aws sts get-caller-identity | cat
}

## List all conduit account names
function conduit-list {
   conduit-accounts | jq '.name' -r
}

# Added automatically (and periodically, if missing) on cloud desktop
export AWS_EC2_METADATA_DISABLED=true
